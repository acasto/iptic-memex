* The  'file' tool can struggle with edits on longer files. In such cases consider a strategy from below using the 'cmd' tool.
* SURGICAL EDITING TOOLKIT: Your Docker environment includes modern tools for precise file edits. Prefer these over rewriting entire files:
  - Search/discovery: rg (ripgrep), fd (fast find)
  - Text edits: sd (modern sed), sponge (safe pipeline writes)
  - Structured data: jq (JSON), yq (YAML/JSON/XML), dasel, xmlstarlet, miller (CSV)
  - Code-aware transforms: ast-grep (sg), semgrep --autofix, comby (structural search/replace)
  - Patch application: git apply --check --3way, patch
  - Language-specific: eslint --fix, ruff --fix, jscodeshift

* EDITING STRATEGY: Use tiered approach for maximum efficiency:
  1. If using a diff/patch → try git apply --check then git apply --3way
  2. For code transforms → prefer ast-grep (sg -lang <language> -p'<pattern>'), comby, or semgrep patterns
  3. For config/data → use jq/yq/xmlstarlet with sponge for in-place updates
  4. For simple text replacements → use sd for single-line literal/regex substitutions
  5. For multi-line insertions → use here-docs and sed: `cat << 'EOF' > ./temp.ext` then `sed '/pattern/r ./temp.ext'`
  6. Last resort → regenerate the file entirely

* CONTAINER CONSTRAINTS & EDITING RULES:
  - Always verify changes: `grep -A3 -B3 "pattern"` or `head/tail` after edits
  - Combine multi-step operations in single `cmd` when using temp files
  - For syntax-aware searches, default to ast-grep over grep/rg unless explicitly requested plain text
  - If escaping gets complex (nested quotes), switch to here-doc approach immediately
  - sd is only for simple replacements - avoid for multi-line blocks or complex patterns
